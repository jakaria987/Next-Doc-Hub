[
  {
    "language": "C",
    "logo": "https://i.ibb.co/yRmJ9Xj/icons8-c-programming-48.png",
    "introduction": "Welcome to the comprehensive documentation for the C programming language! Whether you're a novice or an experienced developer, this guide will help you grasp the fundamental concepts of C programming. Dive deep into the world of C and discover its efficiency, versatility, and low-level features.",
    "tableOfContents": [
      "Introduction",
      "Syntax",
      "Data Types",
      "Control Flow",
      "Functions",
      "Memory Management",
      "Pointers",
      "Structures",
      "File I/O",
      "Example Code"
    ],
    "sections": {
      "Introduction": "C is a powerful and widely used programming language known for its efficiency and low-level features. Whether you're a beginner or an experienced developer, this documentation will help you understand the fundamental concepts of the C language. Explore its history, significance, and how it has influenced modern programming languages.",
      "Syntax": "The syntax of C is concise and follows a procedural programming style. Here's a basic example of a C program:\n\n```c\n// Hello World example\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n```",
      "Data Types": [
        {
          "name": "int",
          "description": "Integers are used to represent whole numbers. They can be positive or negative. Learn how to declare and use integer variables for performing arithmetic operations and storing numerical data."
        },
        {
          "name": "float",
          "description": "Floats are used to represent floating-point numbers. They can hold real numbers with decimal points. Explore the precision and limitations of floating-point numbers in C programming."
        },
        {
          "name": "char",
          "description": "Chars represent individual characters. They are enclosed in single quotes. Discover how to work with characters, use escape sequences, and handle character-based I/O operations."
        },
        {
          "name": "double",
          "description": "Doubles are used to represent double-precision floating-point numbers. They provide higher precision than floats. Learn about the advantages of using double data type and its applications."
        },
        {
          "name": "short",
          "description": "Shorts are used to represent small integers. They consume less memory compared to integers. Explore the range of short integers and scenarios where they are useful."
        }
      ],
      "Control Flow": [
        {
          "name": "if statement",
          "description": "Conditional statements allow you to execute code based on conditions. Use the `if`, `else if`, and `else` keywords to control the flow of your programs. Learn to make decisions and create branching logic."
        },
        {
          "name": "for loop",
          "description": "A `for` loop is used for iterative execution. It consists of initialization, condition, iteration, and body parts. Master the art of creating loops for efficient repetition and manipulation of data."
        },
        {
          "name": "while loop",
          "description": "A `while` loop continues execution as long as a specified condition is true. Understand the mechanics of while loops and how they can be used to create dynamic and interactive programs."
        },
        {
          "name": "switch statement",
          "description": "The `switch` statement allows you to perform different actions based on different conditions. It's useful for menu-driven programs and handling multiple choices. Learn the syntax and applications of switch statements."
        }
      ],
      "Functions": "Functions in C allow you to encapsulate and reuse code. Here's an example of a function that adds two integers:\n\n```c\n#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n```\n\nDive into the world of functions and discover their role in modularizing code, enhancing readability, and promoting code reusability.",
      "Memory Management": "C provides memory management features using functions like `malloc` and `free` to allocate and deallocate memory dynamically. This helps in optimizing memory usage and preventing memory leaks. Explore memory allocation, deallocation, and best practices for efficient memory management in C.",
      "Pointers": "Pointers are a powerful feature in C. They allow you to directly access memory addresses and manipulate data. Understanding pointers is crucial for efficient memory management and working with data structures. Learn how to declare, initialize, and dereference pointers, as well as their applications in dynamic memory allocation and data manipulation.",
      "Structures": "Structures allow you to create custom data types by grouping variables together. They are useful for creating more complex data structures, such as representing a person with multiple attributes. Explore the syntax of structures, creating instances, accessing members, and their role in building organized and modular programs.",
      "File I/O": "C supports file input and output operations. You can read from and write to files using functions like `fopen`, `fread`, and `fwrite`. This is essential for handling persistent data and interacting with external files. Discover the basics of file I/O, opening, closing, reading, and writing files, and how to handle errors and exceptions.",
      "Example Code": [
        {
          "description": "Example: Finding the maximum of two numbers",
          "detailedDescription": "This example demonstrates a fundamental algorithm for finding the maximum of two numbers. The `max` function takes two integer inputs and returns the larger value. The `main` function showcases how to use the `max` function to determine and display the maximum number.",
          "code": "int max(int a, int b) {\n    if (a > b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nint main() {\n    int num1 = 10;\n    int num2 = 20;\n    int result = max(num1, num2);\n    printf(\"The maximum number is %d\\n\", result);\n    return 0;\n}"
        },
        {
          "description": "Example: Fibonacci sequence using recursion",
          "detailedDescription": "The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones. In this example, we'll define a recursive function `fibonacci` to calculate the Fibonacci sequence up to a given term. The `main` function demonstrates how to use the `fibonacci` function to print the sequence.",
          "code": "int fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nint main() {\n    int n = 10;\n    printf(\"Fibonacci sequence up to %d terms:\\n\", n);\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", fibonacci(i));\n    }\n    return 0;\n}"
        },
        {
          "description": "Example: Simple array manipulation",
          "detailedDescription": "Arrays are fundamental for storing collections of data. In this example, we'll create an array of integers, populate it with values, and demonstrate basic array manipulation techniques, including indexing, iteration, and modification.",
          "code": "int main() {\n    int numbers[5] = {1, 2, 3, 4, 5};\n    printf(\"Array elements: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n\n    // Modify an element\n    numbers[2] = 10;\n\n    printf(\"\\nModified array: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", numbers[i]);\n    }\n    return 0;\n}"
        },
        {
          "description": "Example: Working with structures",
          "detailedDescription": "Structures enable you to create complex data types by grouping related variables. In this example, we'll define a `Person` structure with attributes such as name, age, and occupation. We'll demonstrate how to create instances, assign values, and access structure members.",
          "code": "struct Person {\n    char name[50];\n    int age;\n    char occupation[50];\n};\n\nint main() {\n    struct Person person1;\n    strcpy(person1.name, \"John\");\n    person1.age = 30;\n    strcpy(person1.occupation, \"Engineer\");\n\n    printf(\"Person's name: %s\\n\", person1.name);\n    printf(\"Person's age: %d\\n\", person1.age);\n    printf(\"Person's occupation: %s\\n\", person1.occupation);\n    return 0;\n}"
        },
        {
          "description": "Example: File reading and writing",
          "detailedDescription": "File I/O operations are essential for working with external data. In this example, we'll create a program that reads data from an input file, performs a simple transformation, and writes the results to an output file. You'll gain valuable insights into handling files and data streams.",
          "code": "#include <stdio.h>\n\nint main() {\n    FILE *inputFile = fopen(\"input.txt\", \"r\");\n    FILE *outputFile = fopen(\"output.txt\", \"w\");\n\n    if (inputFile == NULL || outputFile == NULL) {\n        printf(\"Error opening files.\\n\");\n        return 1;\n    }\n\n    char character;\n    while ((character = fgetc(inputFile)) != EOF) {\n        // Perform transformation (e.g., convert to uppercase)\n        if (character >= 'a' && character <= 'z') {\n            character -= 32;\n        }\n        fputc(character, outputFile);\n    }\n\n    fclose(inputFile);\n    fclose(outputFile);\n    printf(\"File transformation complete.\\n\");\n    return 0;\n}"
        }
      ]
    }
  },
  {
    "language": "Python",
    "logo": "https://i.ibb.co/5jcc4TF/icons8-python.gif",
    "introduction": "Welcome to the comprehensive documentation for the Python programming language! Whether you're a novice or an experienced developer, this guide will help you grasp the fundamental concepts of Python programming. Dive deep into the world of Python and discover its versatility, readability, and extensive standard library.",
    "tableOfContents": [
      "Introduction",
      "Syntax",
      "Data Types",
      "Control Flow",
      "Functions",
      "Lists",
      "Tuples",
      "Dictionaries",
      "Sets",
      "Classes and Objects",
      "File I/O",
      "Example Code"
    ],
    "sections": {
      "Introduction": "Python is a versatile and widely used programming language known for its readability and ease of use. Whether you're a beginner or an experienced developer, this documentation will help you grasp the essential concepts of Python programming. Delve into Python's history, its role in various domains, and its impact on modern software development.",
      "Syntax": "Python's syntax emphasizes readability and straightforward code structure. Explore the foundational syntax rules, comments, and basic constructs of Python. Get hands-on with a 'Hello World' example and understand Python's approach to code organization.",
      "Data Types": [
        {
          "name": "int",
          "description": "Integers are used to represent whole numbers. They can be positive or negative. Learn how to define integer variables, perform arithmetic operations, and work with numerical data in Python."
        },
        {
          "name": "float",
          "description": "Floats are used to represent floating-point numbers. They can hold real numbers with decimal points. Dive into the precision of floating-point numbers, handling approximations, and avoiding common pitfalls."
        },
        {
          "name": "str",
          "description": "Strings represent sequences of characters. They are enclosed in single or double quotes. Explore string manipulation, formatting, and common operations to work with text-based data."
        },
        {
          "name": "bool",
          "description": "Booleans represent True or False values. They are used for logical operations and conditional expressions. Discover boolean logic, logical operators, and how to control program flow based on conditions."
        },
        {
          "name": "list",
          "description": "Lists are ordered collections of items. They can hold different data types and are mutable. Learn about list creation, indexing, slicing, and manipulation to store and process data efficiently."
        },
        {
          "name": "tuple",
          "description": "Tuples are similar to lists, but they are immutable. They are often used for grouping related data. Explore tuple creation, unpacking, and their role in creating structured data."
        },
        {
          "name": "dict",
          "description": "Dictionaries store key-value pairs. They allow fast data retrieval based on keys. Master dictionary creation, access, modification, and practical applications in data organization."
        },
        {
          "name": "set",
          "description": "Sets are unordered collections of unique elements. They are useful for operations like membership testing and eliminating duplicates. Discover set operations, creation, and use cases in data manipulation."
        }
      ],
      "Control Flow": [
        {
          "name": "if statement",
          "description": "Conditional statements allow you to execute code based on conditions. Use the `if`, `elif`, and `else` keywords for decision-making. Learn to create branching logic and control the flow of your Python programs."
        },
        {
          "name": "for loop",
          "description": "A `for` loop is used for iterative execution. It iterates over a sequence or collection. Master the art of creating loops for efficient repetition, data processing, and automation in Python."
        },
        {
          "name": "while loop",
          "description": "A `while` loop continues execution as long as a specified condition is true. Understand the mechanics of while loops and how they enable dynamic and interactive program behavior."
        },
        {
          "name": "try-except block",
          "description": "The `try` block allows you to test a block of code for errors. The `except` block handles exceptions that may occur. Learn to handle errors gracefully, enhance program robustness, and provide informative feedback."
        }
      ],
      "Functions": "Functions in Python allow you to encapsulate and reuse code. Explore function declaration, parameters, return values, and scope. Discover the role of functions in code modularity, organization, and creating efficient workflows.",
      "Lists": "Lists are versatile data structures in Python. Learn how to create and manipulate lists, perform common list operations, and use list comprehensions for concise data transformations.",
      "Tuples": "Tuples offer immutability and structure to data in Python. Explore tuple creation, indexing, unpacking, and their role in returning multiple values from functions.",
      "Dictionaries": "Dictionaries store key-value pairs for efficient data retrieval. Learn to create dictionaries, access values, iterate through keys and values, and use dictionaries for structured data organization.",
      "Sets": "Sets enable the management of unique elements in Python. Explore set creation, operations, membership testing, and the role of sets in solving distinct data challenges.",
      "Classes and Objects": "Python supports object-oriented programming with classes and objects. Explore class creation, attributes, methods, inheritance, and encapsulation. Learn to design organized and reusable code using OOP principles.",
      "File I/O": "File input and output operations are crucial for interacting with external data. Master file handling in Python, including reading, writing, and error handling. Learn to process various file formats and integrate file I/O into your applications.",
      "Example Code": [
        {
          "description": "Example: Calculating factorial using recursion",
          "detailedDescription": "The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. In this example, we define a recursive function 'factorial' to compute the factorial of a given number. The 'main' function demonstrates how to use the 'factorial' function.",
          "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresult = factorial(5)\nprint(result)  # Output: 120"
        },
        {
          "description": "Example: Reading and writing to a file",
          "detailedDescription": "File I/O is essential for working with persistent data. In this example, we create a text file, write data to it, read the data back, and display it. The 'with' statement ensures proper file handling.",
          "code": "with open('sample.txt', 'w') as file:\n    file.write('Hello, World!')\n\nwith open('sample.txt', 'r') as file:\n    data = file.read()\n    print(data)  # Output: Hello, World!"
        },
        {
          "description": "Example: Using a dictionary",
          "detailedDescription": "Dictionaries allow efficient storage and retrieval of key-value pairs. In this example, we create a dictionary representing a student's information and demonstrate accessing values.",
          "code": "student = {\n    'name': 'John',\n    'age': 25,\n    'courses': ['Math', 'Science']\n}\n\nprint(student['name'])  # Output: John\nprint(student.get('age'))  # Output: 25"
        }
      ]
    }
  },
  {
    "language": "Java",
    "logo": "https://i.ibb.co/rccLnJs/icons8-java.gif",
    "introduction": "Welcome to the extensive documentation for the Java programming language! Whether you're new to programming or an experienced developer, this guide will provide you with a solid understanding of Java's core concepts. Dive into Java's object-oriented nature, portability, and robustness.",
    "tableOfContents": [
      "Introduction",
      "Syntax",
      "Data Types",
      "Control Flow",
      "Methods",
      "Arrays",
      "Classes and Objects",
      "Inheritance",
      "Interfaces",
      "Exception Handling",
      "File I/O",
      "Example Code"
    ],
    "sections": {
      "Introduction": "Java is a popular and versatile programming language used for a wide range of applications. This documentation will guide you through the fundamentals of Java programming, its history, and its pivotal role in enterprise and web development.",
      "Syntax": "Java's syntax is precise and readable, making it a language of choice for many developers. Discover Java's syntax, from class and method declarations to variable assignments. Get started with a simple 'Hello World' example.",
      "Data Types": [
        {
          "name": "int",
          "description": "Integers represent whole numbers. They can be used for calculations and data storage."
        },
        {
          "name": "double",
          "description": "Doubles represent floating-point numbers with double precision. They are suitable for representing real numbers in computations."
        },
        {
          "name": "char",
          "description": "Chars represent individual characters. They are used to store letters, digits, and special symbols."
        },
        {
          "name": "boolean",
          "description": "Booleans represent true or false values. They are used in logical expressions and control flow statements."
        },
        {
          "name": "String",
          "description": "Strings are sequences of characters. They are used to represent text and manipulate textual data."
        }
      ],
      "Control Flow": [
        {
          "name": "if statement",
          "description": "Conditional statements allow you to execute code based on conditions. Use the 'if', 'else if', and 'else' keywords to control program flow."
        },
        {
          "name": "for loop",
          "description": "A 'for' loop is used for iterative execution. It allows you to repeat a block of code a specified number of times."
        },
        {
          "name": "while loop",
          "description": "A 'while' loop continues execution as long as a condition is true. It's useful for creating loops with variable termination conditions."
        },
        {
          "name": "switch statement",
          "description": "The 'switch' statement allows you to perform different actions based on different values of a variable. It's commonly used for menu-driven programs."
        }
      ],
      "Methods": "Methods in Java allow you to organize and reuse code. Learn how to define methods, pass arguments, and return values. Understand method overloading and encapsulation.",
      "Arrays": "Arrays are fundamental data structures in Java. Learn how to declare, initialize, and manipulate arrays. Explore one-dimensional and two-dimensional arrays.",
      "Classes and Objects": "Java is an object-oriented language. Explore class and object creation, constructors, instance variables, and methods. Learn the basics of encapsulation and object-oriented concepts.",
      "Inheritance": "Inheritance allows you to create a new class that inherits properties and behaviors from an existing class. Master inheritance, superclasses, and subclasses in Java.",
      "Interfaces": "Interfaces define a contract for classes to implement. Learn how to create interfaces, implement them in classes, and achieve multiple inheritance using interfaces.",
      "Exception Handling": "Exception handling is vital for robust and error-tolerant programs. Explore Java's exception hierarchy, try-catch blocks, and best practices for handling exceptions.",
      "File I/O": "Java supports file input and output operations. Learn how to read from and write to files using classes like 'File', 'FileReader', and 'FileWriter'.",
      "Example Code": [
        {
          "description": "Example: Calculating factorial using recursion",
          "detailedDescription": "Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. In this example, we define a recursive method 'factorial' to compute the factorial. The 'main' method demonstrates usage.",
          "code": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        int result = factorial(5);\n        System.out.println(result);  // Output: 120\n    }\n}"
        },
        {
          "description": "Example: Creating and using objects",
          "detailedDescription": "Objects are instances of classes. In this example, we define a 'Person' class with attributes like name and age. We create objects, set values, and demonstrate object-oriented principles.",
          "code": "public class Person {\n    String name;\n    int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Person person1 = new Person(\"John\", 30);\n        System.out.println(\"Name: \" + person1.name);\n        System.out.println(\"Age: \" + person1.age);\n    }\n}"
        },
        {
          "description": "Example: Using inheritance",
          "detailedDescription": "Inheritance allows a class to inherit properties and behaviors from another class. In this example, we define a 'Vehicle' class and a 'Car' subclass. We demonstrate method overriding.",
          "code": "class Vehicle {\n    void start() {\n        System.out.println(\"Vehicle starting...\");\n    }\n}\n\nclass Car extends Vehicle {\n    void start() {\n        System.out.println(\"Car starting...\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Vehicle vehicle = new Car();\n        vehicle.start();  // Output: Car starting...\n    }\n}"
        },
        {
          "description": "Example: Using interfaces",
          "detailedDescription": "Interfaces define contracts for classes to implement. In this example, we define a 'Drawable' interface and classes that implement it. We achieve polymorphism using interfaces.",
          "code": "interface Drawable {\n    void draw();\n}\n\nclass Circle implements Drawable {\n    public void draw() {\n        System.out.println(\"Drawing a circle...\");\n    }\n}\n\nclass Square implements Drawable {\n    public void draw() {\n        System.out.println(\"Drawing a square...\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Drawable shape1 = new Circle();\n        Drawable shape2 = new Square();\n        shape1.draw();  // Output: Drawing a circle...\n        shape2.draw();  // Output: Drawing a square...\n    }\n}"
        },
        {
          "description": "Example: Exception handling",
          "detailedDescription": "Exception handling ensures robustness by handling unexpected errors. In this example, we divide two numbers and catch possible arithmetic exceptions.",
          "code": "public class DivisionExample {\n    public static void main(String[] args) {\n        int dividend = 10;\n        int divisor = 0;\n        try {\n            int result = dividend / divisor;\n            System.out.println(\"Result: \" + result);\n        } catch (ArithmeticException e) {\n            System.out.println(\"Error: Division by zero.\");\n        }\n    }\n}"
        }
      ]
    }
  },
  {
    "language": "JavaScript",
    "logo": "https://i.ibb.co/mNxnccW/icons8-javascript.gif",
    "introduction": "Welcome to the comprehensive documentation for the JavaScript programming language! Whether you're a beginner or an experienced developer, this guide will help you understand the core concepts of JavaScript. Explore its role in web development, its dynamic nature, and its versatility.",
    "tableOfContents": [
      "Introduction",
      "Syntax",
      "Data Types",
      "Control Flow",
      "Functions",
      "Arrays",
      "Objects",
      "Classes",
      "Asynchronous Programming",
      "DOM Manipulation",
      "Example Code"
    ],
    "sections": {
      "Introduction": "JavaScript is a versatile scripting language primarily used for web development. This documentation will guide you through the basics of JavaScript, its history, and its importance in creating interactive and dynamic web applications.",
      "Syntax": "JavaScript's syntax is approachable and loosely typed. Explore JavaScript's basic syntax, variable declaration, and code structure. Get started with a 'Hello World' example and understand the fundamental building blocks.",
      "Data Types": [
        {
          "name": "Number",
          "description": "Numbers represent numeric values. They can be integers or floating-point numbers. Learn how to perform arithmetic operations, handle decimals, and manage numerical data."
        },
        {
          "name": "String",
          "description": "Strings are sequences of characters. They are used to represent text. Dive into string manipulation, template literals, and common string functions."
        },
        {
          "name": "Boolean",
          "description": "Booleans represent two values: true or false. Explore boolean logic, logical operators, and how to control program flow using conditional statements."
        },
        {
          "name": "Array",
          "description": "Arrays are ordered collections of elements. Learn how to create, manipulate, and iterate through arrays. Explore array methods for data transformation and manipulation."
        },
        {
          "name": "Object",
          "description": "Objects store key-value pairs and represent complex data structures. Master object creation, property access, and object-oriented programming concepts in JavaScript."
        }
      ],
      "Control Flow": [
        {
          "name": "if statement",
          "description": "Conditional statements allow you to execute code based on conditions. Use the `if`, `else if`, and `else` keywords to control program flow. Learn to make decisions and create branching logic."
        },
        {
          "name": "for loop",
          "description": "A `for` loop is used for iterative execution. It iterates over a range of values or elements in an array. Master loop creation and control for data manipulation and repetition."
        },
        {
          "name": "while loop",
          "description": "A `while` loop continues execution as long as a specified condition is true. Understand the mechanics of while loops and how they can be used for dynamic program behavior."
        },
        {
          "name": "switch statement",
          "description": "The `switch` statement allows you to perform different actions based on different conditions. It's useful for handling multiple cases and making decisions."
        }
      ],
      "Functions": "Functions in JavaScript allow you to group and reuse code. Explore function declaration, parameters, return values, and scope. Discover the role of functions in code organization and reusability.",
      "Arrays": "Arrays are versatile data structures in JavaScript. Learn how to create arrays, iterate through them, and perform common operations like filtering and mapping.",
      "Objects": "Objects allow you to create complex data structures in JavaScript. Explore object creation, property access, methods, and how objects are used to model real-world entities.",
      "Classes": "JavaScript supports classes for object-oriented programming. Learn how to define classes, create instances, and use inheritance to build organized and maintainable code.",
      "Asynchronous Programming": "JavaScript's asynchronous nature is essential for web applications. Explore asynchronous programming with callbacks, promises, and async/await. Learn to manage asynchronous tasks and prevent blocking code.",
      "DOM Manipulation": "The Document Object Model (DOM) enables dynamic web interactions. Explore DOM manipulation using JavaScript to create, modify, and interact with HTML elements and CSS styles.",
      "Example Code": [
        {
          "description": "Example: Calculating factorial using recursion",
          "detailedDescription": "Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. In this example, we define a recursive function 'factorial' to compute the factorial. The 'main' function demonstrates usage.",
          "code": "function factorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nconst result = factorial(5);\nconsole.log(result);  // Output: 120"
        },
        {
          "description": "Example: Fetching data using async/await",
          "detailedDescription": "Asynchronous operations are common in web development. In this example, we use the 'fetch' API and async/await to retrieve data from an API asynchronously.",
          "code": "async function fetchData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    return data;\n}\n\nconst apiUrl = 'https://api.example.com/data';\nfetchData(apiUrl)\n    .then(data => console.log(data));"
        },
        {
          "description": "Example: Manipulating the DOM",
          "detailedDescription": "DOM manipulation enables dynamic web content. In this example, we create an HTML element, modify its attributes and content, and append it to the DOM.",
          "code": "const newElement = document.createElement('p');\nnewElement.textContent = 'Hello, DOM!';\nnewElement.classList.add('greeting');\ndocument.body.appendChild(newElement);"
        },
        {
          "description": "Example: Using classes and inheritance",
          "detailedDescription": "JavaScript supports object-oriented programming with classes. In this example, we define a 'Vehicle' class and a 'Car' subclass. We create instances and demonstrate inheritance.",
          "code": "class Vehicle {\n    constructor(make, model) {\n        this.make = make;\n        this.model = model;\n    }\n}\n\nclass Car extends Vehicle {\n    constructor(make, model, year) {\n        super(make, model);\n        this.year = year;\n    }\n}\n\nconst myCar = new Car('Toyota', 'Camry', 2022);\nconsole.log(myCar);"
        },
        {
          "description": "Example: Event handling",
          "detailedDescription": "Handling events is crucial for interactive web applications. In this example, we attach an event listener to a button and respond to user clicks.",
          "code": "const button = document.getElementById('myButton');\nbutton.addEventListener('click', () => {\n    console.log('Button clicked!');\n});"
        }
      ]
    }
  },
  {
    "language": "C++",
    "logo": "https://i.ibb.co/9WJBrfJ/icons8-c-144.png",
    "introduction": "Welcome to the comprehensive documentation for the C++ programming language! Whether you're a beginner or an experienced programmer, this guide will help you understand the features and capabilities of C++. Explore its power, efficiency, and support for both procedural and object-oriented programming.",
    "tableOfContents": [
      "Introduction",
      "Syntax",
      "Data Types",
      "Control Flow",
      "Functions",
      "Classes and Objects",
      "Inheritance",
      "Templates",
      "STL - Standard Template Library",
      "File I/O",
      "Example Code"
    ],
    "sections": {
      "Introduction": "C++ is an extension of the C programming language with additional features for high-level programming. This documentation will guide you through the fundamental concepts of C++, its history, and its role in software development.",
      "Syntax": "C++ syntax builds upon C syntax while introducing new features. Explore basic C++ syntax, variable declarations, and function definitions. Begin with a 'Hello World' example and delve into the language constructs.",
      "Data Types": [
        {
          "name": "int",
          "description": "Integers are used to represent whole numbers. They can store both positive and negative values."
        },
        {
          "name": "double",
          "description": "Doubles represent double-precision floating-point numbers. They provide higher precision than floats."
        },
        {
          "name": "char",
          "description": "Chars represent individual characters. They are enclosed in single quotes."
        },
        {
          "name": "bool",
          "description": "Booleans represent either true or false values. They are used in logical expressions and control flow."
        },
        {
          "name": "string",
          "description": "Strings are sequences of characters. They are used to represent text and perform string manipulation."
        }
      ],
      "Control Flow": [
        {
          "name": "if statement",
          "description": "Conditional statements allow you to execute code based on conditions. Use the 'if', 'else if', and 'else' keywords for branching."
        },
        {
          "name": "for loop",
          "description": "A 'for' loop is used for iterative execution. It iterates over a range of values or elements in an array."
        },
        {
          "name": "while loop",
          "description": "A 'while' loop continues execution as long as a specified condition is true. It's useful for dynamic repetition."
        },
        {
          "name": "switch statement",
          "description": "The 'switch' statement allows you to perform different actions based on different values of a variable."
        }
      ],
      "Functions": "Functions in C++ allow you to encapsulate and reuse code. Learn function declaration, parameter passing, and return values. Explore function overloading and scope resolution.",
      "Classes and Objects": "C++ supports object-oriented programming. Explore class and object creation, constructors, and member functions. Learn about access specifiers and the 'this' pointer.",
      "Inheritance": "Inheritance allows you to create a new class by inheriting properties and behaviors from an existing class. Understand base classes, derived classes, and method overriding.",
      "Templates": "C++ templates allow generic programming. Learn how to define function and class templates, enabling code to work with multiple data types.",
      "STL - Standard Template Library": "The STL provides pre-built classes and functions for common tasks. Explore containers like vectors and maps, and algorithms for sorting and searching.",
      "File I/O": "C++ supports file input and output. Learn how to read from and write to files using 'ifstream', 'ofstream', and file streams.",
      "Example Code": [
        {
          "description": "Example: Calculating factorial using recursion",
          "detailedDescription": "Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. In this example, we define a recursive function 'factorial' to compute the factorial. The 'main' function demonstrates usage.",
          "code": "#include <iostream>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int result = factorial(5);\n    std::cout << result;  // Output: 120\n    return 0;\n}"
        },
        {
          "description": "Example: Creating and using classes",
          "detailedDescription": "Classes allow you to define new data types. In this example, we define a 'Person' class with attributes like name and age. We create objects and access class members.",
          "code": "#include <iostream>\n#include <string>\n\nclass Person {\npublic:\n    std::string name;\n    int age;\n};\n\nint main() {\n    Person person1;\n    person1.name = \"John\";\n    person1.age = 30;\n    std::cout << \"Name: \" << person1.name << std::endl;\n    std::cout << \"Age: \" << person1.age << std::endl;\n    return 0;\n}"
        },
        {
          "description": "Example: Inheritance and method overriding",
          "detailedDescription": "Inheritance allows you to create a new class based on an existing class. In this example, we define a 'Vehicle' class and a 'Car' subclass. We demonstrate method overriding.",
          "code": "#include <iostream>\n\nclass Vehicle {\npublic:\n    void start() {\n        std::cout << \"Vehicle starting...\" << std::endl;\n    }\n};\n\nclass Car : public Vehicle {\npublic:\n    void start() {\n        std::cout << \"Car starting...\" << std::endl;\n    }\n};\n\nint main() {\n    Vehicle vehicle;\n    Car car;\n    vehicle.start();  // Output: Vehicle starting...\n    car.start();      // Output: Car starting...\n    return 0;\n}"
        },
        {
          "description": "Example: Using templates",
          "detailedDescription": "Templates enable writing generic code. In this example, we define a template function 'max' to find the maximum of two values. We demonstrate its usage with different data types.",
          "code": "#include <iostream>\n\n// Template function to find maximum\ntemplate <typename T>\nT max(T a, T b) {\n    return (a > b) ? a : b;\n}\n\nint main() {\n    int intMax = max(5, 10);\n    double doubleMax = max(3.14, 2.71);\n    std::cout << \"Max int: \" << intMax << std::endl;\n    std::cout << \"Max double: \" << doubleMax << std::endl;\n    return 0;\n}"
        },
        {
          "description": "Example: Using STL containers",
          "detailedDescription": "STL provides containers for managing data. In this example, we use a 'vector' to store and manipulate a list of integers. We demonstrate insertion, traversal, and sorting.",
          "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::vector<int> numbers = {5, 2, 9, 1, 4};\n    numbers.push_back(7);        // Insert 7\n    std::sort(numbers.begin(), numbers.end());\n    for (int num : numbers) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}"
        }
      ]
    }
  },
  {
    "language": "Ruby",
    "logo": "https://i.ibb.co/ZfThxYh/icons8-ruby-96.png",
    "introduction": "Welcome to the comprehensive documentation for the Ruby programming language! Whether you're a beginner or an experienced developer, this guide will help you explore Ruby's elegance and simplicity. Discover its dynamic nature, object-oriented features, and extensive libraries.",
    "tableOfContents": [
      "Introduction",
      "Syntax",
      "Data Types",
      "Control Flow",
      "Methods",
      "Classes and Objects",
      "Modules",
      "Exceptions",
      "File I/O",
      "RubyGems",
      "Example Code"
    ],
    "sections": {
      "Introduction": "Ruby is known for its developer-friendly syntax and dynamic behavior. This documentation will introduce you to the world of Ruby programming, its history, and its impact on web development and scripting.",
      "Syntax": "Ruby's syntax is designed for simplicity and expressiveness. Explore Ruby's basic syntax, variable assignments, and function definitions. Begin with a 'Hello World' example and learn about code blocks.",
      "Data Types": [
        {
          "name": "Integer",
          "description": "Integers represent whole numbers. They can be positive or negative."
        },
        {
          "name": "Float",
          "description": "Floats represent floating-point numbers. They are used to store real numbers with decimal points."
        },
        {
          "name": "String",
          "description": "Strings are sequences of characters. They are used to represent textual data and perform string manipulation."
        },
        {
          "name": "Boolean",
          "description": "Booleans represent true or false values. They are used in logical expressions and control flow."
        },
        {
          "name": "Array",
          "description": "Arrays are ordered collections of elements. They can store various data types and are used for data storage and manipulation."
        }
      ],
      "Control Flow": [
        {
          "name": "if statement",
          "description": "Conditional statements allow you to execute code based on conditions. Use the 'if', 'elsif', and 'else' keywords for branching."
        },
        {
          "name": "for loop",
          "description": "A 'for' loop is used for iterative execution. It iterates over a range of values or elements in an array."
        },
        {
          "name": "while loop",
          "description": "A 'while' loop continues execution as long as a specified condition is true. It's useful for dynamic repetition."
        },
        {
          "name": "case statement",
          "description": "The 'case' statement allows you to compare a value against multiple cases. It's used for making decisions based on various conditions."
        }
      ],
      "Methods": "Methods in Ruby allow you to encapsulate and reuse code. Explore method definitions, parameter passing, and return values. Learn about default arguments and variable-length argument lists.",
      "Classes and Objects": "Ruby is object-oriented and encourages the use of classes. Explore class and object creation, instance variables, and methods. Understand class inheritance and method visibility.",
      "Modules": "Modules in Ruby provide a way to organize and reuse code. Learn how to define modules, include them in classes, and achieve mixin-like behavior.",
      "Exceptions": "Exception handling is crucial for robust programs. Learn about Ruby's exception hierarchy, 'begin'-'rescue'-'ensure' blocks, and how to handle errors.",
      "File I/O": "Ruby supports file input and output. Learn how to read from and write to files using 'File' class methods.",
      "RubyGems": "RubyGems is a package manager for Ruby libraries. Explore how to install, manage, and use RubyGems to enhance your projects.",
      "Example Code": [
        {
          "description": "Example: Calculating factorial using recursion",
          "detailedDescription": "Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. In this example, we define a recursive method 'factorial' to compute the factorial.",
          "code": "def factorial(n)\n    if n == 0\n        1\n    else\n        n * factorial(n - 1)\n    end\nend\n\nresult = factorial(5)\nputs result  # Output: 120"
        },
        {
          "description": "Example: Creating and using objects",
          "detailedDescription": "Objects are instances of classes. In this example, we define a 'Person' class with attributes like name and age. We create objects, set values, and access instance variables.",
          "code": "class Person\n    attr_accessor :name, :age\n\n    def initialize(name, age)\n        @name = name\n        @age = age\n    end\nend\n\nperson1 = Person.new(\"John\", 30)\nputs \"Name: #{person1.name}\"\nputs \"Age: #{person1.age}\""
        },
        {
          "description": "Example: Using modules and mixins",
          "detailedDescription": "Modules allow code reuse and organization. In this example, we define a 'Greeting' module with a method. We include the module in a class to achieve mixin behavior.",
          "code": "module Greeting\n    def say_hello\n        puts \"Hello!\"\n    end\nend\n\nclass Person\n    include Greeting\nend\n\nclass Robot\n    include Greeting\nend\n\nperson = Person.new\nperson.say_hello  # Output: Hello!\n\nrobot = Robot.new\nrobot.say_hello    # Output: Hello!"
        },
        {
          "description": "Example: Handling exceptions",
          "detailedDescription": "Exception handling ensures program robustness. In this example, we handle a division by zero error using a 'begin'-'rescue' block.",
          "code": "begin\n    dividend = 10\n    divisor = 0\n    result = dividend / divisor\n    puts \"Result: #{result}\"\nrescue ZeroDivisionError => e\n    puts \"Error: #{e.message}\"  # Output: Error: divided by 0\nend"
        },
        {
          "description": "Example: Using RubyGems",
          "detailedDescription": "RubyGems simplifies library management. In this example, we install and use the 'colorize' gem to add color to terminal output.",
          "code": "require 'colorize'\n\ndef main\n    puts \"Hello, RubyGems!\".colorize(:blue)\nend\n\nif __FILE__ == $0\n    main\nend"
        }
      ]
    }
  }
]
